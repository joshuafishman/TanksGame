import pygame, time, sys, math, random

def screenUpdate():
    pygame.display.flip()

class Bullet(pygame.sprite.Sprite):
    def __init__(self, posX, posY,velX, velY, Tank):
        super(Bullet, self).__init__()
        self.image = pygame.image.load('bullet.bmp').convert()
        self.image.set_colorkey((255,255,255), pygame.RLEACCEL)
        self.rect = self.image.get_rect()
        self.posX = posX
        self.posY = posY
        self.velX = velX
        self.velY = velY
        self.accY = .01
        self.tank=Tank
        
    def updatePosition(self):
        self.posX = self.posX + self.velX
        self.velY = self.velY + self.accY
        self.posY = self.posY + self.velY
        self.rect.x = self.posX
        self.rect.y = self.posY
    def getCurrPos(self):
        return (self.posX,self.posY)

    def update(self):
        self.updatePosition()
        
    def getCurrVel(self):
        return (self.velX, self.velY)

    def kill(self, screen):
        pygame.draw.circle(screen, (255,255,0), (int(self.posX), int(self.posY)), 15, 0)
        pygame.time.wait(5)
        super(Bullet, self).kill()
    
class Tank(pygame.sprite.Sprite):

    def __init__(self, screen, location, orientation):
        super(Tank, self).__init__()
        self.orientation=orientation
        if self.orientation == 'left':
            self.image = pygame.image.load('tank1.bmp').convert()
            self.barrelOffset = 39
        elif self.orientation == 'right':
            self.image = pygame.image.load('tank2.bmp').convert()
            self.barrelOffset = 21
        else:
            print "Invalid Orientation"
        
        self.health = 100
        self.power = 50
        self.fuel = 100
        
        self.barrelLength = 15
        self.screen = screen
        
        self.image.set_colorkey((255,255,255), pygame.RLEACCEL)
        self.rect = self.image.get_rect()

        self.rect.x = location
        self.rect.y = 400

        self.turn = True
        self.mousePos = pygame.mouse.get_pos()
        self.angle = math.atan2(self.rect.y - self.mousePos[1], self.mousePos[0] - (self.rect.x + self.barrelOffset))
        self.startPos = (self.rect.x + self.barrelOffset, self.rect.y + 5)
        self.endPos = (self.startPos[0] + (self.barrelLength * math.cos(self.angle)), self.startPos[1] - self.barrelLength * math.sin(self.angle))
    
    def changeTurn (self):
        if self.turn is True:
            self.turn = False
        elif self.turn is False:
            self.turn = True
        self.fuel=100
    def moveForward(self):
        if self.fuel >= 1:
            self.rect.x += 1      
            self.fuel-=1
    
    def moveBackward(self):
        if self.fuel >= 1:
            self.rect.x -= 1
            self.fuel-=1
        
    def update(self):
        self.updateBarrel()

    def updateBarrel(self):
        self.mousePos = pygame.mouse.get_pos()
        if self.turn is True:
            self.angle = math.atan2(self.rect.y - self.mousePos[1], self.mousePos[0] - (self.rect.x + self.barrelOffset))
            self.startPos = (self.rect.x + self.barrelOffset, self.rect.y + 5)
            self.endPos = (self.startPos[0] + (self.barrelLength * math.cos(self.angle)), self.startPos[1] - self.barrelLength * math.sin(self.angle))
        pygame.draw.line(self.screen, (0, 0, 0), self.startPos, self.endPos, 3)
        
    def getBarrelVals(self):
        return [self.endPos,self.angle]
        
    def getAngle(self):
        return self.angle

    def getHealth(self):
        return self.health

    def getFuel(self):
        return self.fuel
   
    def fire(self):
        return Bullet(self.getBarrelVals()[0][0]+15*math.cos(self.angle), self.getBarrelVals()[0][1]-15*math.sin(self.angle),self.power/50*2*math.cos(self.getBarrelVals()[1]), self.power/50*-2*math.sin(self.getBarrelVals()[1]), self)
        
    def powerUp(self):
        if self.power < 100:
            self.power += 5

    def powerDown(self):
        if self.power > 0:
            self.power -= 5

    def getPower(self):
        return self.power

class Block(pygame.sprite.Sprite):
    def __init__(self, position):
        super(Block, self).__init__()
        self.position = position
        self.image = pygame.image.load('block.bmp').convert()
        self.rect = self.image.get_rect()
        self.rect.x = position[0]
        self.rect.y = position[1]        

class Scoreboard():
    def __init__(self, screen):
        self.screen = screen
        
        self.font = pygame.font.Font(None, 30)
        self.font.set_bold(True)

    def renderText(self, text, color):
        return self.font.render(text, False, color)

    def powerBar(self, title, power, pos):
        self.screen.blit(self.renderText(title, (255, 255, 255)), pos)
        pygame.draw.rect(self.screen, (255, 255, 255), [pos[0] + self.font.size(title)[0] + 10, pos[1] - 7, 100, 30], 0)
        pygame.draw.rect(self.screen, (255, 0, 0), [pos[0] + self.font.size(title)[0] + 10, pos[1] - 7, power, 30], 0)
        pygame.draw.rect(self.screen, (0, 0, 0), [pos[0] + self.font.size(title)[0] + 10, pos[1] - 7, 100, 30], 2)
        self.screen.blit(self.renderText(str(power), (0, 0, 0)), (pos[0] + self.font.size(title)[0] + 10 + 50 - (self.font.size(str(power))[0] / 2), pos[1]))

    def numVal(self, title, val, pos):
        self.screen.blit(self.renderText(title, (255, 255, 255)), pos)
        self.screen.blit(self.renderText(str(val), (255, 255, 255)), (pos[0] + self.font.size(title)[0] + 10, pos[1]))

    def health(self, playerOneHealth, playerTwoHealth):
        self.powerBar('Health', playerOneHealth, (50, 50))
        self.powerBar('Health', playerTwoHealth, (750, 50))

    def angle(self, angle):
        self.numVal('Angle:', angle, (150, 455))

    def power(self, power):
        self.powerBar('Power', power, (515, 455))

    def fuel(self, fuel):
        self.powerBar('Fuel', fuel, (700, 455))

class Game():

    def __init__(self, screen, size, mapNum):
        self.screen = screen
        self.size = size
        self.playerOne = Tank(self.screen, 10,'left')
        self.playerOne.changeTurn()
        self.playerTwo = Tank(self.screen, self.size - 80 ,'right')
        self.tanks = pygame.sprite.Group()
        self.tanks.add(self.playerOne)
        self.tanks.add(self.playerTwo)
        self.blocks=pygame.sprite.Group()
        self.mapNum=mapNum
        
        self.background = pygame.image.load ("background.bmp")
        if mapNum is 1:
            self.ground = pygame.image.load ("ground.bmp")
            self.gap = []
        elif mapNum is 2:
            self.ground = pygame.image.load ("ground2.bmp")
            self.gap = range(450,650)
        self.ground.set_colorkey((255,255,255), pygame.RLEACCEL)
        
        b=[[False for x in range((size-200)/15)] for x in range(31)] #make a field of blocks
        for i in range (31):
            for j in range ((size-200)/15):
                if random.random()<.4 and (j*15+100) not in self.gap:
                    if i is 0 or b[i-1][j] is True:
                        self.blocks.add(Block((j*15+100,420-(i*15))))
                        b[i][j]=True   
                    
        
        self.scoreboard = Scoreboard(self.screen)

        self.bullets = pygame.sprite.Group()

    def paint_background(self):
        offset = (pygame.time.get_ticks() % 100000) / 100
        self.screen.blit(self.background, (offset, 0))
        self.screen.blit(self.background, (offset - 1000, 0))
        self.screen.blit(self.ground, (0, 435))

    def play(self):
        stop = False
        while stop is False:
            keys_pressed = [event for event in pygame.event.get() if event.type == pygame.KEYDOWN or event.type == pygame.QUIT]    
            for e in keys_pressed:
                if e.type == pygame.QUIT:
                    stop = True
                    break
                if e.key == pygame.K_RIGHT:
                    if self.playerOne.turn is True:
                        for i in range(10):                           
                            self.playerOne.moveForward()
                            b=pygame.sprite.spritecollideany(self.playerOne,self.blocks)
                            if b != None:
                                b.kill()
                                self.playerOne.fuel-=5 
                    elif self.playerTwo.turn is True:
                        for i in range(10):
                            self.playerTwo.moveForward()
                            b=pygame.sprite.spritecollideany(self.playerTwo,self.blocks)
                            if b != None:
                                b.kill()
                                self.playerTwo.fuel-=5  
                if e.key == pygame.K_LEFT:
                    if self.playerOne.turn is True:
                        for i in range(10):
                            self.playerOne.moveBackward()
                            b=pygame.sprite.spritecollideany(self.playerOne,self.blocks)
                            if b != None:
                                b.kill()
                                self.playerOne.fuel-=5 
                    elif self.playerTwo.turn is True:
                        for i in range(10):
                            self.playerTwo.moveBackward()
                            b=pygame.sprite.spritecollideany(self.playerTwo,self.blocks)
                            if b != None:
                                b.kill()
                                self.playerTwo.fuel-=5  
                if e.key == pygame.K_UP:
                    if self.playerOne.turn is True:
                        for i in range (10):
                            self.playerOne.powerUp() 
                    elif self.playerTwo.turn is True:
                        self.playerTwo.powerUp() 
                if e.key == pygame.K_DOWN:
                    if self.playerOne.turn is True:
                        self.playerOne.powerDown() 
                    elif self.playerTwo.turn is True:
                        self.playerTwo.powerDown()
                if e.key == pygame.K_SPACE:
                    if self.playerOne.turn is True:
                        self.bullets.add(self.playerOne.fire())
                    elif self.playerTwo.turn is True:
                        self.bullets.add(self.playerTwo.fire())
                    self.playerOne.changeTurn()
                    self.playerTwo.changeTurn()
            for t in self.tanks.sprites():
                if t.getBarrelVals()[0][0]>(min(self.gap)+50) and t.getBarrelVals()[0][0]<(max(self.gap)-50):
                    t.health = 0
                    for i in range(10):
                        t.rect.y +=5
                        self.tanks.draw(self.screen)
                        screenUpdate()
                        pygame.time.wait(5)

            self.paint_background()
            self.blocks.draw(self.screen)
            self.tanks.draw(self.screen)
            self.tanks.update()
            for b in self.bullets.sprites(): #bullets.draw didn't work
                for i in pygame.sprite.spritecollide(b, self.blocks, False):
                    i.kill()
                    b.kill(screen)
                if pygame.sprite.collide_rect(b,self.playerOne):
                    b.kill(self.screen)
                    self.playerOne.health -= 10
                if pygame.sprite.collide_rect(b,self.playerTwo):
                    b.kill(self.screen)
                    self.playerTwo.health -= 10
                if b.posY>460:
                    b.kill(self.screen)
                self.screen.blit(b.image,b.getCurrPos())
            self.scoreboard.health(self.playerOne.getHealth(), self.playerTwo.getHealth())
            if self.playerOne.turn is True:
                self.scoreboard.angle(180 - int(math.degrees(self.playerOne.getAngle())))
                self.scoreboard.power(self.playerOne.getPower())
                self.scoreboard.fuel(self.playerOne.getFuel())       
            elif self.playerTwo.turn is True:
                self.scoreboard.angle(180 - int(math.degrees(self.playerTwo.getAngle())))
                self.scoreboard.power(self.playerTwo.getPower())
                self.scoreboard.fuel(self.playerTwo.getFuel())
            self.bullets.update()
            screenUpdate()
            for t in self.tanks.sprites():
                if t.health == 0:
                    self.screen.blit(pygame.font.Font(None, 100).render(t.orientation+" player loses", 1, (0, 0, 0)), (200,200))
                    screenUpdate()
                    print str(self.tanks.sprites())
                    pygame.time.wait(3000)
                    my_game = Game(self.screen, self.size,self.mapNum)
                    my_game.play()
                    return
        pygame.quit()
        sys.exit()


pygame.init()
size = 1000
screen = pygame.display.set_mode( (size, 500) )
pygame.display.set_caption('Tanks')
pygame.mouse.set_cursor(*pygame.cursors.broken_x)

my_game = Game(screen, size,2)
my_game.play()
