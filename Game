import pygame, time, sys, math

def screenUpdate():
    pygame.display.flip()

class Bullet(pygame.sprite.Sprite):
    def __init__(self, posX, posY,velX, velY):
        super(Bullet, self).__init__()
        self.image = pygame.image.load('bullet.bmp').convert()
        self.image.set_colorkey((255,255,255), pygame.RLEACCEL)
        
        self.posX = posX
        self.posY = posY
        self.velX = velX
        self.velY = velY
        self.accY = .001
        self.rect = self.image.get_rect()


    def updatePosition(self, screen):
        self.posX = self.posX + self.velX
        self.velY = self.velY + self.accY
        self.posY = self.posY + self.velY
        screen.blit(self.image,self.getCurrPos())

    def getCurrPos(self):
        return (self.posX,self.posY)

    def update(self):
        self.updatePosition(self.screen)
        
    def getCurrVel(self):
        return (self.velX, self.velY)
    
class Tank(pygame.sprite.Sprite):

    def __init__(self, screen, location, orientation):
        super(Tank, self).__init__()
        if orientation == 'left':
            self.image = pygame.image.load('tank1.bmp').convert()
            self.barrelOffset = 39
        elif orientation == 'right':
            self.image = pygame.image.load('tank2.bmp').convert()
            self.barrelOffset = 21
        else:
            print "Invalid Orientation"

        self.barrelLength = 15
        self.screen = screen
        
        self.image.set_colorkey((255,255,255), pygame.RLEACCEL)
        self.rect = self.image.get_rect()

        self.rect.x = location
        self.rect.y = 400

        self.turn=True
        self.mousePos = pygame.mouse.get_pos()
        self.angle = math.atan2(self.rect.y - self.mousePos[1], self.mousePos[0] - (self.rect.x + self.barrelOffset))
        self.startPos = (self.rect.x + self.barrelOffset, self.rect.y + 5)
        self.endPos = (self.startPos[0] + (self.barrelLength * math.cos(self.angle)), self.startPos[1] - self.barrelLength * math.sin(self.angle))
    
     def changeTurn (self):
        if self.turn is True:
            self.turn = False
        elif self.turn is False:
            self.turn = True
        return self.turn
    
    def moveForward(self):
        self.rect.x += 10      

    def moveBackward(self):
        self.rect.x -= 10
        
    def update(self):
        self.updateBarrel()

    def updateBarrel(self):
        self.mousePos = pygame.mouse.get_pos()
        if self.turn is True:
            self.angle = math.atan2(self.rect.y - self.mousePos[1], self.mousePos[0] - (self.rect.x + self.barrelOffset))
            self.startPos = (self.rect.x + self.barrelOffset, self.rect.y + 5)
            self.endPos = (self.startPos[0] + (self.barrelLength * math.cos(self.angle)), self.startPos[1] - self.barrelLength * math.sin(self.angle))
        pygame.draw.line(self.screen, (0, 0, 0), self.startPos, self.endPos, 3)
        
    def getBarrelVals(self):
        return [self.startpos,self.angle]
   
    def fire(self):
        return Bullet(self.getBarrelVals[0][0], self.getBarrelVals[0][1], .1*math.cos(self.getBarrelVals[1]), math.cos(self.getBarrelVals[1]),math.sin(self.getBarrelVals[1]))

class Game():

    def __init__(self, screen):
        self.screen = screen
        self.prev_and_off = [pygame.time.get_ticks(),0.0] #tuple for background
        self.playerOne = Tank(self.screen, 10,'left')
        self.playerTwo = Tank(self.screen, 400,'right')
        self.tanks = pygame.sprite.Group()
        self.background = pygame.image.load ("background.bmp")
        self.ground = pygame.image.load ("ground.bmp")
        self.tanks.add(self.playerOne)
        self.tanks.add(self.playerTwo)

        self.bullets = pygame.sprite.Group()
        print self.tanks.sprites()

        self.tanks.draw(self.screen)

        screenUpdate()
    

    def paint_background(self):
        offset = (pygame.time.get_ticks() % 100000) / 100
        screen.blit(self.background, (offset, 0))
        screen.blit(self.background, (offset - 1000, 0))
        screen.blit(self.ground, (0, 435))

    def play(self):
        print self.playerOne.changeTurn()
        stop = False
        while stop is False:
            keys_pressed = [event for event in pygame.event.get() if event.type == pygame.KEYDOWN or event.type == pygame.QUIT]    
            for e in keys_pressed:
                if e.type == pygame.QUIT:
                    stop = True
                    break
                if e.key == pygame.K_RIGHT:
                    self.playerOne.moveForward()
                if e.key == pygame.K_LEFT:
                    self.playerOne.moveBackward()
                    
            self.paint_background()
            self.tanks.draw(self.screen)
            self.tanks.update()
            screenUpdate()    
        pygame.quit()
        sys.exit()


pygame.init()
screen = pygame.display.set_mode( (1000, 500) )
pygame.display.set_caption('Tanks')

my_game = Game(screen)
my_game.play()
