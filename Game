import pygame, time, sys, math

def screenUpdate():
    pygame.display.flip()

class Tank(pygame.sprite.Sprite):

    def __init__(self, screen, location, orientation):
        super(Tank, self).__init__()
        if orientation == 'left':
            self.image = pygame.image.load('tank1.bmp').convert()
            self.barrelOffset = 39
        elif orientation == 'right':
            self.image = pygame.image.load('tank2.bmp').convert()
            self.barrelOffset = 21
        else:
            print "Invalid Orientation"

        self.barrelLength = 15
        self.screen = screen
        
        self.image.set_colorkey((255,255,255), pygame.RLEACCEL)
        self.rect = self.image.get_rect()

        self.rect.x = location
        self.rect.y = 400

    def moveForward(self):
        self.rect.x += 10      

    def moveBackward(self):
        self.rect.x -= 10
        
    def update(self):
        self.updateBarrel()

    def updateBarrel(self):
        self.mousePos = pygame.mouse.get_pos()
        self.angle = math.atan2(self.rect.y - self.mousePos[1], self.mousePos[0] - (self.rect.x + self.barrelOffset))
        self.startPos = (self.rect.x + self.barrelOffset, self.rect.y + 5)
        self.endPos = (self.startPos[0] + (self.barrelLength * math.cos(self.angle)), self.startPos[1] - self.barrelLength * math.sin(self.angle))
        pygame.draw.line(self.screen, (0, 0, 0), self.startPos, self.endPos, 3)

class Game():

    def __init__(self, screen):
        self.screen = screen
        self.prev_and_off = [pygame.time.get_ticks(),0.0] #tuple for background
        self.playerOne = Tank(self.screen, 10,'left')
        self.playerTwo = Tank(self.screen, 400,'right')
        self.tanks = pygame.sprite.Group()
        self.background = pygame.image.load ("background.bmp")
        self.ground = pygame.image.load ("ground.bmp")
        self.tanks.add(self.playerOne)
        self.tanks.add(self.playerTwo)

        print self.tanks.sprites()

        self.tanks.draw(self.screen)

        screenUpdate()
    

    def paint_background (self, prev_and_off):
        """paint and scroll background, takes and returns the tuple [previous background shift   time, current background offset distance]"""
        offset = prev_and_off[1]
        prevtime = prev_and_off[0]
        screen.blit(self.background, [-995+offset,0])
        screen.blit(self.background, [offset,0])
        screen.blit(self.ground, [0, 435])
        if pygame.time.get_ticks() - prevtime > 50:
                n_offset=offset+.5
                n_prevtime = pygame.time.get_ticks()
                if n_offset >= 1000:
                        n_offset =0
                return [n_prevtime, n_offset]
        return [prevtime, offset]

    def play(self):
        events = [event.type for event in pygame.event.get()]
        while pygame.QUIT not in events:
            self.prev_and_off=self.paint_background(self.prev_and_off) #paint and update background
            
            keys_pressed = [event for event in pygame.event.get() if event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN]    
            for e in keys_pressed:
                if e.key == pygame.K_RIGHT:
                    self.playerOne.moveForward()
                if e.key == pygame.K_LEFT:
                    self.playerOne.moveBackward()
                    
            self.tanks.draw(self.screen)
            self.tanks.update()
            screenUpdate()    
            events = [event.type for event in pygame.event.get()]
        pygame.quit()
        sys.exit()


pygame.init()
screen = pygame.display.set_mode( (1000, 500) )
pygame.display.set_caption('Tanks')

my_game = Game(screen)
my_game.play()
